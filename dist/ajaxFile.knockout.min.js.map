{"version":3,"sources":["ajaxFile.knockout.js","ajaxFile.knockout.ts"],"names":["factory","define","amd","jQuery","window","Zepto","ko","$","AjaxFileKnockout","AjaxFileKnockout.registerBindingHandler","AjaxFileKnockout.registerBindingHandler.init","value","valueAccessor","this","FileInputWrapper","undefined","AjaxFileKnockout.registerBindingHandler.update","AjaxFileKnockout.FileInputWrapper","AjaxFileKnockout.FileInputWrapper.constructor","AjaxFileKnockout.FileInputWrapper.getElement","AjaxFileKnockout.FileInputWrapper.fileSelected","registerBindingHandler"],"mappings":";;;;;CAKC,SAAUA,GACe,kBAAXC,SAAyBA,OAAOC,IACvCD,QACI,SACA,YACDD,GAEHA,EAAyB,mBAAVG,QAAwBA,OAASC,OAAOC,MAAOC,KAEpE,SAAUC,EAAGD,GACX,YCfJ,IAAUE,IAAV,SAAUA,GAgBNA,QAAAA,GAAuCA,EAAoBA,GACvDC,EAAGA,gBAAgBA,MACfA,KAAIA,SAACA,EAASA,GACVC,EAAEA,GAASA,OAAOA,WACd,GAAMC,GAAQC,GAEVD,GADAE,KAAKF,MACC,GAAIG,GAAiBD,MAErBE,WAIlBN,OAAMA,SAACA,EAASA,GACZO,GAAMA,GAAQA,GACdA,KAAKA,EAAGA,OAAOA,IAAUA,EAAQA,MAAOA,CACpCA,GAAMA,GAAWA,EAAEA,EACnBA,GAASA,YAAYA,EAASA,OAAMA,GAAMA,OA7B1DR,GAAAA,GAAAA,WACIS,QAAAA,GAAoBA,GAAAC,KAAAA,MAAAA,EAUxBD,MAPWA,GAAAA,UAAAA,WAAPA,WACIE,MAAOA,MAAKA,OAGTF,EAAAA,UAAAA,aAAPA,WACIG,QAASA,KAAKA,MAAMA,OAE5BH,IAEgBT,GAAAA,uBAAsBA,GAhBhCA,IAAAA,OAuCVA,EAAiBa,uBAAuBf,EAAIC","file":"ajaxFile.knockout.min.js","sourcesContent":["/*!\r\n * AjaxFile.js - V0.2.0\r\n * Project repository: https://github.com/fpellet/jquery.ajaxFile\r\n * Licensed under the MIT license\r\n */\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'jquery',\n            'knockout'\n        ], factory);\n    } else {\n        factory(typeof jQuery != 'undefined' ? jQuery : window.Zepto, ko);\n    }\n}(function ($, ko) {\n    'use strict';\n    var AjaxFileKnockout;\n    (function (AjaxFileKnockout) {\n        'use strict';\n        var FileInputWrapper = function () {\n            function FileInputWrapper(input) {\n                this.input = input;\n            }\n            FileInputWrapper.prototype.getElement = function () {\n                return this.input;\n            };\n            FileInputWrapper.prototype.fileSelected = function () {\n                return !!this.input.value;\n            };\n            return FileInputWrapper;\n        }();\n        function registerBindingHandler(ko, $) {\n            ko.bindingHandlers.file = {\n                init: function (element, valueAccessor) {\n                    $(element).change(function () {\n                        var value = valueAccessor();\n                        if (this.value) {\n                            value(new FileInputWrapper(this));\n                        } else {\n                            value(undefined);\n                        }\n                    });\n                },\n                update: function (element, valueAccessor) {\n                    var value = valueAccessor();\n                    if (!ko.unwrap(value) && element.value) {\n                        var $element = $(element);\n                        $element.replaceWith($element.clone(true, true));\n                    }\n                }\n            };\n        }\n        AjaxFileKnockout.registerBindingHandler = registerBindingHandler;\n    }(AjaxFileKnockout || (AjaxFileKnockout = {})));\n    AjaxFileKnockout.registerBindingHandler(ko, $);\n}));","namespace AjaxFileKnockout {\r\n    'use strict';\r\n\r\n    class FileInputWrapper implements IFileInputWrapper {\r\n        constructor(private input: HTMLInputElement) {\r\n        }\r\n\r\n        public getElement(): HTMLInputElement {\r\n            return this.input;\r\n        }\r\n\r\n        public fileSelected(): boolean {\r\n            return !!this.input.value;\r\n        }\r\n    }\r\n\r\n    export function registerBindingHandler(ko: KnockoutStatic, $: JQueryStatic): void {\r\n        ko.bindingHandlers.file = {\r\n            init(element, valueAccessor): void {\r\n                $(element).change(function (): void {\r\n                    const value = valueAccessor();\r\n                    if (this.value) {\r\n                        value(new FileInputWrapper(this));\r\n                    } else {\r\n                        value(undefined);\r\n                    }\r\n                });\r\n            },\r\n            update(element, valueAccessor): void {\r\n                const value = valueAccessor();\r\n                if (!ko.unwrap(value) && element.value) {\r\n                    const $element = $(element);\r\n                    $element.replaceWith($element.clone(true, true));\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nAjaxFileKnockout.registerBindingHandler(ko, $);\r\n"],"sourceRoot":"/source/"}