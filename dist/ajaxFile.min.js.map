{"version":3,"sources":["ajaxFile.js","CookieReponseHandler.ts","Option.ts","Request.ts","ResponseDocument.ts","Url.ts","AjaxFile.enum.ts","AjaxFile.ts","Form.ts","AjaxFilePromise.ts","FormResponseHandler.ts","ReponseHandlerDispatcher.ts","TimeoutResponseHandler.ts","Utils.ts"],"names":["factory","define","amd","window","AjaxFile","jQuery","Zepto","$","readCookie","name","hasCookie","clearCookie","mergeWithDefaultOption","option","generateRequestId","createErrorResponseDocument","error","createCookieResponseDocument","value","createCookieResponseDocument.read","extractStatus","container","parse","desiredDataType","getCurrentUrlWithoutHash","currentPageIsHttpsMode","urlIsHttpsMode","url","DataType","Form","ajaxFile","send","AjaxFilePromise","AjaxFilePromise.constructor","AjaxFilePromise.then","AjaxFilePromise.done","AjaxFilePromise.fail","AjaxFilePromise.always","AjaxFilePromise.abord","CookieReponseHandler","CookieReponseHandler.constructor","CookieReponseHandler.onReceived","CookieReponseHandler.checkCookie","CookieReponseHandler.dispose","Form_1","Form.abordIFrame","Form.createFormFragment","Form.insertFormFragment","Form.getDocumentOfIFrame","Form.createIFrame","Form.createHtmlForm","Form.cloneAndMoveInputFiles","Form.cloneAndMoveInputFile","Form.urlHasAlreadyParameters","Form.applyGetMethodOnForm","Form.applyPostMethodOnForm","Form.createForm","Form.Form","Form.Form.constructor","Form.Form.initialize","Form.Form.addRequestIdInData","Form.Form.onLoaded","Form.Form.submit","Form.Form.getResponseDocument","Form.Form.abord","Form.Form.dispose","JsonToPostDataConverter","FormResponseHandler","FormResponseHandler.onReceived","FormResponseHandler.onStateUpdated","FormResponseHandler.dispose","defaultOption","data","files","desiredResponseDataType","Json","method","timeoutInSeconds","ReponseHandlerDispatcher","ReponseHandlerDispatcher.constructor","ReponseHandlerDispatcher.onReceived","ReponseHandlerDispatcher.dispose","Request","Request.constructor","Request.initialize","Request.submit","Request.send","Request.onResponseReceived","Request.abord","Request.onError","Request.dispose","FormResponseDocument","FormResponseDocument.constructor","FormResponseDocument.isLoaded","FormResponseDocument.hrefHasChanged","FormResponseDocument.isXml","FormResponseDocument.read","FormResponseDocument.searchContainer","TimeoutResponseHandler","TimeoutResponseHandler.onReceived","TimeoutResponseHandler.dispose","JsonToPostDataConverter.pushParameters","JsonToPostDataConverter.pushParameterOfProperty","JsonToPostDataConverter.convert","Array","prototype","forEach","fn","scope","i","len","this","length","call"],"mappings":"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","file":"ajaxFile.min.js","sourcesContent":["/*!\r\n * AjaxFile.js - V0.0.3\r\n * Project repository: https://github.com/fpellet/jquery.ajaxFile\r\n * Licensed under the MIT license\r\n */\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else {\n        window.AjaxFile = factory(typeof jQuery != 'undefined' ? jQuery : window.Zepto);\n    }\n}(function ($) {\n    'use strict';\n    var DataType;\n    (function (DataType) {\n        DataType[DataType['Json'] = 0] = 'Json';\n        DataType[DataType['Xml'] = 1] = 'Xml';\n        DataType[DataType['Text'] = 2] = 'Text';\n    }(DataType || (DataType = {})));\n    var ajaxFile = {\n        send: function (option) {\n            option = mergeWithDefaultOption(option);\n            var request = new Request(option);\n            request.initialize();\n            return request.submit();\n        }\n    };\n    var AjaxFilePromise = function () {\n        function AjaxFilePromise(abordCallback, register) {\n            var deferred = $.Deferred();\n            this.promise = deferred.promise();\n            this.abordCallback = abordCallback;\n            register(function (result) {\n                return deferred.resolve(result);\n            }, function (result) {\n                return deferred.reject(result);\n            });\n        }\n        AjaxFilePromise.prototype.then = function (success, error) {\n            this.promise = this.promise.then(success, error);\n            return this;\n        };\n        AjaxFilePromise.prototype.done = function (success) {\n            this.promise = this.promise.done(success);\n            return this;\n        };\n        AjaxFilePromise.prototype.fail = function (error) {\n            this.promise = this.promise.fail(error);\n            return this;\n        };\n        AjaxFilePromise.prototype.always = function (complete) {\n            this.promise = this.promise.always(complete);\n            return this;\n        };\n        AjaxFilePromise.prototype.abord = function () {\n            if (!this.abordCallback) {\n                this.abordCallback();\n            }\n        };\n        return AjaxFilePromise;\n    }();\n    function readCookie(name) {\n        var value = (document.cookie.match('(^|; )' + name + '=([^;]*)') || 0)[2];\n        return decodeURIComponent(value) || null;\n    }\n    ;\n    function hasCookie(name) {\n        return document.cookie.indexOf(name + '=') !== -1;\n    }\n    ;\n    function clearCookie(name) {\n        document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n    }\n    ;\n    var CookieReponseHandler = function () {\n        function CookieReponseHandler(id) {\n            this.cookieName = id;\n        }\n        CookieReponseHandler.prototype.onReceived = function (option, form, receivedCallback) {\n            var _this = this;\n            this.receivedCallback = receivedCallback;\n            setTimeout(function () {\n                return _this.checkCookie();\n            }, 100);\n        };\n        CookieReponseHandler.prototype.checkCookie = function () {\n            var _this = this;\n            if (this.disposed) {\n                return;\n            }\n            if (!hasCookie(this.cookieName)) {\n                setTimeout(function () {\n                    return _this.checkCookie();\n                }, 100);\n                return;\n            }\n            var value = readCookie(this.cookieName);\n            var response = createCookieResponseDocument(value);\n            this.receivedCallback(response);\n        };\n        CookieReponseHandler.prototype.dispose = function () {\n            this.disposed = true;\n            clearCookie(this.cookieName);\n            this.receivedCallback = null;\n        };\n        return CookieReponseHandler;\n    }();\n    var Form;\n    (function (Form_1) {\n        'use strict';\n        var Form = function () {\n            function Form(option) {\n                this.option = option;\n            }\n            Form.prototype.initialize = function (requestId) {\n                this.addRequestIdInData(requestId);\n                this.formFragment = createFormFragment(this.option, requestId);\n                insertFormFragment(this.formFragment);\n            };\n            Form.prototype.addRequestIdInData = function (requestId) {\n                this.option.data.__requestId = requestId;\n            };\n            Form.prototype.onLoaded = function (loadCallback) {\n                var iframe = this.formFragment.iframe;\n                iframe.on('load', loadCallback);\n            };\n            Form.prototype.submit = function () {\n                this.formFragment.form.submit();\n            };\n            Form.prototype.getResponseDocument = function () {\n                var document = getDocumentOfIFrame(this.formFragment.iframe);\n                if (!document) {\n                    throw 'server abort';\n                }\n                var orgineUrl = this.formFragment.iframe.attr('origineSrc');\n                return new FormResponseDocument(document, orgineUrl);\n            };\n            Form.prototype.abord = function () {\n                abordIFrame(this.formFragment.iframe);\n            };\n            Form.prototype.dispose = function () {\n                if (this.formFragment) {\n                    this.formFragment.container.remove();\n                    this.formFragment = null;\n                }\n            };\n            return Form;\n        }();\n        function abordIFrame($iframe) {\n            try {\n                var iframe = $iframe[0];\n                var documentOfIFrame = iframe.contentWindow.document;\n                if (documentOfIFrame.execCommand) {\n                    documentOfIFrame.execCommand('Stop');\n                }\n            } catch (ignore) {\n            }\n            $iframe.attr('src', $iframe.attr('origineSrc'));\n        }\n        ;\n        function createFormFragment(option, requestId) {\n            option.data.__requestId = requestId;\n            var iframe = createIFrame(requestId, currentPageIsHttpsMode());\n            var form = createHtmlForm(option, requestId);\n            var container = $('<div></div>');\n            container.hide();\n            container.append(iframe);\n            container.append(form);\n            return {\n                container: container,\n                form: form,\n                iframe: iframe\n            };\n        }\n        ;\n        function insertFormFragment(formFragment) {\n            formFragment.container.appendTo('body');\n        }\n        ;\n        function getDocumentOfIFrame($iframe) {\n            var iframe = $iframe[0];\n            try {\n                if (iframe.contentWindow) {\n                    return iframe.contentWindow.document;\n                }\n            } catch (ignore) {\n            }\n            try {\n                // simply checking may throw in ie8 under ssl or mismatched protocol\n                return iframe.contentDocument ? iframe.contentDocument : iframe.document;\n            } catch (ignore) {\n            }\n            return iframe.document;\n        }\n        ;\n        function createIFrame(id, isHttps) {\n            var iframe = $('<iframe name=\"' + id + '\"></iframe>');\n            var src = isHttps ? 'javascript:false' : 'about:blank';\n            iframe.attr('src', src);\n            iframe.attr('origineSrc', src);\n            return iframe;\n        }\n        function createHtmlForm(option, iframeId) {\n            var form = $('<form></form>');\n            form.attr('method', option.method);\n            form.attr('action', option.url);\n            form.attr('target', iframeId);\n            form.attr('encoding', 'multipart/form-data');\n            form.attr('enctype', 'multipart/form-data');\n            if (option.method.toLowerCase() === 'GET') {\n                applyGetMethodOnForm(form, option);\n            } else {\n                applyPostMethodOnForm(form, option);\n            }\n            cloneAndMoveInputFiles(form, option.files);\n            return form;\n        }\n        ;\n        function cloneAndMoveInputFiles(form, files) {\n            $.each(files, function (num, file) {\n                cloneAndMoveInputFile(form, file);\n            });\n        }\n        ;\n        function cloneAndMoveInputFile(form, file) {\n            var input = $(file.element);\n            input.replaceWith(input.clone(true, true));\n            input.attr('name', file.name);\n            input.off();\n            form.append(file.element);\n        }\n        ;\n        function urlHasAlreadyParameters(url) {\n            return url.indexOf('?') !== -1;\n        }\n        function applyGetMethodOnForm(form, option) {\n            var urlParameters = $.param(option.data);\n            var url = option.url + (urlHasAlreadyParameters(option.url) ? '&' : '?') + urlParameters;\n            form.attr('action', url);\n            return form;\n        }\n        ;\n        function applyPostMethodOnForm(form, option) {\n            form.attr('action', option.url);\n            var parameters = JsonToPostDataConverter.convert(option.data);\n            $.each(parameters, function (num, parameter) {\n                var input = $('<input type=\"hidden\" />');\n                input.attr('name', parameter.name);\n                input.val(parameter.value);\n                input.appendTo(form);\n            });\n            return form;\n        }\n        ;\n        function createForm(option, requestId) {\n            var form = new Form(option);\n            form.initialize(requestId);\n            return form;\n        }\n        Form_1.createForm = createForm;\n        ;\n    }(Form || (Form = {})));\n    var FormResponseHandler = function () {\n        function FormResponseHandler() {\n        }\n        FormResponseHandler.prototype.onReceived = function (option, form, receivedCallback) {\n            var _this = this;\n            this.form = form;\n            this.form.onLoaded(function () {\n                return _this.onStateUpdated();\n            });\n            this.receivedCallback = receivedCallback;\n        };\n        FormResponseHandler.prototype.onStateUpdated = function () {\n            var _this = this;\n            try {\n                var documentOfIFrame = this.form.getResponseDocument();\n                if (!documentOfIFrame) {\n                    this.receivedCallback(createErrorResponseDocument('server abort'));\n                    return;\n                }\n                if (!documentOfIFrame.isLoaded()) {\n                    setTimeout(function () {\n                        return _this.onStateUpdated();\n                    }, 250);\n                    return;\n                }\n                this.receivedCallback(documentOfIFrame);\n            } catch (error) {\n                this.receivedCallback(createErrorResponseDocument(error));\n            }\n        };\n        FormResponseHandler.prototype.dispose = function () {\n            if (this.form) {\n                this.form.dispose();\n                this.form = null;\n            }\n            this.receivedCallback = null;\n        };\n        return FormResponseHandler;\n    }();\n    var defaultOption = {\n        data: {},\n        files: [],\n        desiredResponseDataType: DataType.Json,\n        method: 'POST',\n        timeoutInSeconds: 60\n    };\n    function mergeWithDefaultOption(option) {\n        option = $.extend(true, {}, defaultOption, option);\n        if (!option.url) {\n            option.url = getCurrentUrlWithoutHash();\n        }\n        return option;\n    }\n    ;\n    var ReponseHandlerDispatcher = function () {\n        function ReponseHandlerDispatcher(id) {\n            var cookieHandler = new CookieReponseHandler(id);\n            this.handlers = [\n                new TimeoutResponseHandler(),\n                new FormResponseHandler(),\n                cookieHandler\n            ];\n        }\n        ReponseHandlerDispatcher.prototype.onReceived = function (option, form, receivedCallback) {\n            this.handlers.forEach(function (handler) {\n                handler.onReceived(option, form, receivedCallback);\n            });\n        };\n        ReponseHandlerDispatcher.prototype.dispose = function () {\n            this.handlers.forEach(function (handler) {\n                handler.dispose();\n            });\n        };\n        return ReponseHandlerDispatcher;\n    }();\n    function generateRequestId() {\n        return 'ajaxFile' + new Date().getTime();\n    }\n    var Request = function () {\n        function Request(option) {\n            this.option = option;\n            this.id = generateRequestId();\n            this.responseHandler = new ReponseHandlerDispatcher(this.id);\n        }\n        Request.prototype.initialize = function () {\n            this.form = Form.createForm(this.option, this.id);\n        };\n        Request.prototype.submit = function () {\n            var _this = this;\n            var promise = new AjaxFilePromise(function () {\n                return _this.abord();\n            }, function (successCallback, errorCallback) {\n                _this.successCallback = successCallback;\n                _this.errorCallback = errorCallback;\n            });\n            setTimeout(function () {\n                return _this.send();\n            }, 10);\n            return promise.always(function () {\n                return _this.dispose();\n            });\n        };\n        Request.prototype.send = function () {\n            var _this = this;\n            if (this.isCompleted) {\n                return;\n            }\n            this.responseHandler.onReceived(this.option, this.form, function (response) {\n                return _this.onResponseReceived(response);\n            });\n            try {\n                this.form.submit();\n            } catch (err) {\n                this.onError('error', err);\n            }\n        };\n        Request.prototype.onResponseReceived = function (response) {\n            if (this.isCompleted) {\n                return;\n            }\n            try {\n                var result = response.read(this.option.desiredResponseDataType);\n                if (result.status.isSuccess) {\n                    this.successCallback(result);\n                } else {\n                    this.errorCallback(result);\n                }\n            } catch (error) {\n                this.onError('error', error);\n            }\n            this.isCompleted = true;\n        };\n        Request.prototype.abord = function (reason) {\n            this.onError(reason || 'cancelled');\n        };\n        Request.prototype.onError = function (error, status, data) {\n            if (this.isCompleted) {\n                return;\n            }\n            this.isCompleted = true;\n            this.form.abord();\n            this.errorCallback({\n                status: status,\n                data: data,\n                error: error\n            });\n        };\n        Request.prototype.dispose = function () {\n            this.isCompleted = true;\n            if (this.form) {\n                this.form.dispose();\n                this.form = null;\n            }\n            if (this.responseHandler) {\n                this.responseHandler.dispose();\n                this.responseHandler = null;\n            }\n        };\n        return Request;\n    }();\n    function createErrorResponseDocument(error) {\n        return {\n            read: function () {\n                throw error;\n            }\n        };\n    }\n    ;\n    function createCookieResponseDocument(value) {\n        return {\n            read: function (desiredDataType) {\n                var data = parse(value, desiredDataType);\n                return {\n                    status: extractStatus(),\n                    data: data\n                };\n            }\n        };\n    }\n    ;\n    var FormResponseDocument = function () {\n        function FormResponseDocument(document, origineUrl) {\n            this.document = document;\n            this.origineUrl = origineUrl;\n        }\n        FormResponseDocument.prototype.isLoaded = function () {\n            if (!this.hrefHasChanged()) {\n                return false;\n            }\n            if (this.isXml()) {\n                return true;\n            }\n            return this.document.body !== null && !!this.document.body.innerHTML;\n        };\n        FormResponseDocument.prototype.hrefHasChanged = function () {\n            return this.document.location.href !== this.origineUrl;\n        };\n        FormResponseDocument.prototype.isXml = function () {\n            return this.document.XMLDocument || $.isXMLDoc(this.document);\n        };\n        FormResponseDocument.prototype.read = function (desiredDataType) {\n            var container = this.searchContainer();\n            var status = extractStatus(container);\n            var data = parse(container.val(), desiredDataType);\n            return {\n                status: status,\n                data: data\n            };\n        };\n        FormResponseDocument.prototype.searchContainer = function () {\n            var container = this.document.getElementsByTagName('textarea')[0];\n            if (!container) {\n                throw 'Cannot find textarea in response';\n            }\n            return $(container);\n        };\n        return FormResponseDocument;\n    }();\n    function extractStatus(container) {\n        var status = {\n            code: 200,\n            text: 'OK',\n            isSuccess: true\n        };\n        if (container) {\n            var code = Number(container.attr('statusCode')) || status.code;\n            status.code = code;\n            status.text = container.attr('statusText') || status.text;\n            status.isSuccess = code >= 200 && code < 300 || code === 304;\n        }\n        return status;\n    }\n    ;\n    function parse(value, desiredDataType) {\n        if (!value) {\n            return null;\n        }\n        switch (desiredDataType) {\n        case DataType.Text:\n            return value;\n        case DataType.Json:\n            return $.parseJSON(value);\n        case DataType.Xml:\n            var xml = $.parseXML(value);\n            if (xml.documentElement.nodeName === 'parsererror') {\n                throw 'parsererror';\n            }\n            return xml;\n        default:\n            throw 'Invalid datatype : ' + desiredDataType;\n        }\n    }\n    ;\n    var TimeoutResponseHandler = function () {\n        function TimeoutResponseHandler() {\n        }\n        TimeoutResponseHandler.prototype.onReceived = function (option, form, receivedCallback) {\n            this.dispose();\n            if (option.timeoutInSeconds) {\n                var timeoutInMilliseconds = option.timeoutInSeconds * 1000;\n                this.timeoutHandle = setTimeout(function () {\n                    receivedCallback(createErrorResponseDocument('Timeout'));\n                }, timeoutInMilliseconds);\n            }\n        };\n        TimeoutResponseHandler.prototype.dispose = function () {\n            if (this.timeoutHandle) {\n                clearTimeout(this.timeoutHandle);\n                this.timeoutHandle = null;\n            }\n        };\n        return TimeoutResponseHandler;\n    }();\n    function getCurrentUrlWithoutHash() {\n        var currentUrl = window.location.href;\n        return (currentUrl.match(/^([^#]+)/) || [])[1];\n    }\n    function currentPageIsHttpsMode() {\n        return urlIsHttpsMode(window.location.href);\n    }\n    function urlIsHttpsMode(url) {\n        return /^https/i.test(url || '');\n    }\n    var JsonToPostDataConverter;\n    (function (JsonToPostDataConverter) {\n        'use strict';\n        function pushParameters(results, data, prefix) {\n            if (!data) {\n                return;\n            }\n            for (var propertyName in data) {\n                if (!data.hasOwnProperty(propertyName)) {\n                    continue;\n                }\n                var value = data[propertyName];\n                if (!value) {\n                    continue;\n                }\n                pushParameterOfProperty(results, propertyName, data[propertyName], prefix);\n            }\n        }\n        ;\n        function pushParameterOfProperty(results, propertyName, value, prefix) {\n            var parameterName = prefix ? prefix + '[' + propertyName + ']' : propertyName;\n            var type = Object.prototype.toString.call(value);\n            if (type === '[object Array]') {\n                value.forEach(function (item, index) {\n                    pushParameters(results, item, parameterName + '[' + index + ']');\n                });\n                return;\n            }\n            if (type === '[object Object]') {\n                pushParameters(results, value, parameterName);\n                return;\n            }\n            results.push({\n                name: parameterName,\n                value: value + ''\n            });\n        }\n        ;\n        function convert(data) {\n            var result = [];\n            pushParameters(result, data);\n            return result;\n        }\n        JsonToPostDataConverter.convert = convert;\n        ;\n    }(JsonToPostDataConverter || (JsonToPostDataConverter = {})));\n    function map(data, callback) {\n        if (typeof callback !== 'function') {\n            throw new TypeError();\n        }\n        var arrayLength = data.length;\n        var result = new Array(arrayLength);\n        for (var i = 0; i < arrayLength; i++) {\n            if (i in data) {\n                result[i] = callback.call(undefined, data[i]);\n            }\n        }\n        return result;\n    }\n    ;\n    if (!Array.prototype.forEach) {\n        Array.prototype.forEach = function (fn, scope) {\n            for (var i = 0, len = this.length; i < len; ++i) {\n                fn.call(scope, this[i], i, this);\n            }\n        };\n    }\n    return ajaxFile;\n}));","function readCookie(name: string): string {\r\n    const value = (document.cookie.match(`(^|; )${name}=([^;]*)`) || 0)[2];\r\n\r\n    return decodeURIComponent(value) || null;\r\n};\r\n\r\nfunction hasCookie(name: string): boolean {\r\n    return document.cookie.indexOf(name + '=') !== -1;\r\n};\r\n\r\nfunction clearCookie(name: string): void {\r\n    document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n};\r\n\r\nclass CookieReponseHandler {\r\n    private cookieName: string;\r\n    private receivedCallback: (response: IResponseDocument) => void;\r\n    private disposed: boolean;\r\n\r\n    constructor(id: string) {\r\n        this.cookieName = id;\r\n    }\r\n\r\n    public onReceived(option: IOption, form: Form.IForm, receivedCallback: (response: IResponseDocument) => void): void {\r\n        this.receivedCallback = receivedCallback;\r\n\r\n        setTimeout(() => this.checkCookie(), 100);\r\n    }\r\n\r\n    private checkCookie(): void {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        if (!hasCookie(this.cookieName)) {\r\n            setTimeout(() => this.checkCookie(), 100);\r\n            return;\r\n        }\r\n\r\n        const value = readCookie(this.cookieName);\r\n\r\n        const response = createCookieResponseDocument(value);\r\n        this.receivedCallback(response);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.disposed = true;\r\n\r\n        clearCookie(this.cookieName);\r\n        this.receivedCallback = null;\r\n    }\r\n}\r\n","let defaultOption: IOption = {\r\n    data: {},\r\n    files: [],\r\n    desiredResponseDataType: DataType.Json,\r\n    method: 'POST',\r\n    timeoutInSeconds: 60\r\n};\r\n\r\nfunction mergeWithDefaultOption(option: IOption): IOption {\r\n    option = $.extend(true, {}, defaultOption, option);\r\n\r\n    if (!option.url) {\r\n        option.url = getCurrentUrlWithoutHash();\r\n    }\r\n\r\n    return option;\r\n};\r\n","function generateRequestId(): string {\r\n    return 'ajaxFile' + (new Date().getTime());\r\n}\r\n\r\nclass Request {\r\n    private option: IOption;\r\n    private form: Form.IForm;\r\n    private isCompleted: boolean;\r\n    private responseHandler: IReponseHandler;\r\n    private id: string;\r\n\r\n    private successCallback: IAjaxFileResultCallback;\r\n    private errorCallback: IAjaxFileResultCallback;\r\n\r\n    constructor(option: IOption) {\r\n        this.option = option;\r\n        this.id = generateRequestId();\r\n        this.responseHandler = new ReponseHandlerDispatcher(this.id);\r\n    }\r\n\r\n    public initialize(): void {\r\n        this.form = Form.createForm(this.option, this.id);\r\n    }\r\n\r\n    public submit(): IAjaxFilePromise {\r\n        const promise = new AjaxFilePromise(() => this.abord(), (successCallback, errorCallback) => {\r\n            this.successCallback = successCallback;\r\n            this.errorCallback = errorCallback;\r\n        });\r\n\r\n        setTimeout(() => this.send(), 10);\r\n\r\n        return promise.always(() => this.dispose());\r\n    }\r\n\r\n    private send(): void {\r\n        if (this.isCompleted) {\r\n            return;\r\n        }\r\n\r\n        this.responseHandler.onReceived(this.option, this.form, (response) => this.onResponseReceived(response));\r\n\r\n        try {\r\n            this.form.submit();\r\n        } catch (err) {\r\n            this.onError('error', err);\r\n        }\r\n    }\r\n\r\n    private onResponseReceived(response: IResponseDocument): void {\r\n        if (this.isCompleted) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const result = response.read(this.option.desiredResponseDataType);\r\n\r\n            if (result.status.isSuccess) {\r\n                this.successCallback(result);\r\n            } else {\r\n                this.errorCallback(result);\r\n            }\r\n        } catch (error) {\r\n            this.onError('error', error);\r\n        }\r\n\r\n        this.isCompleted = true;\r\n    }\r\n\r\n    public abord(reason?: string): void {\r\n        this.onError(reason || 'cancelled');\r\n    }\r\n\r\n    private onError(error: any, status?: IResponseStatus, data?: any): void {\r\n        if (this.isCompleted) {\r\n            return;\r\n        }\r\n        this.isCompleted = true;\r\n\r\n        this.form.abord();\r\n\r\n        this.errorCallback({ status: status, data: data, error: error });\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.isCompleted = true;\r\n\r\n        if (this.form) {\r\n            this.form.dispose();\r\n            this.form = null;\r\n        }\r\n\r\n        if (this.responseHandler) {\r\n            this.responseHandler.dispose();\r\n            this.responseHandler = null;\r\n        }\r\n    }\r\n}\r\n","interface IResponseDocument {\r\n    read(desiredDataType: DataType): IAjaxFileResult;\r\n}\r\n\r\nfunction createErrorResponseDocument(error: string): IResponseDocument {\r\n    return {\r\n        read: (): IAjaxFileResult => {\r\n            throw error;\r\n        }\r\n    };\r\n};\r\n\r\nfunction createCookieResponseDocument(value: string): IResponseDocument {\r\n    return {\r\n        read(desiredDataType: DataType): IAjaxFileResult {\r\n            const  data = parse(value, desiredDataType);\r\n\r\n            return { status: extractStatus(), data: data };\r\n        }\r\n    };\r\n};\r\n\r\nclass FormResponseDocument {\r\n    private document: any;\r\n    private origineUrl: string;\r\n\r\n    constructor(document: Document, origineUrl: string) {\r\n        this.document = document;\r\n        this.origineUrl = origineUrl;\r\n    }\r\n\r\n    public isLoaded(): boolean {\r\n        if (!this.hrefHasChanged()) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isXml()) {\r\n            return true;\r\n        }\r\n\r\n        return this.document.body !== null && !!this.document.body.innerHTML;\r\n    }\r\n\r\n    private hrefHasChanged(): boolean {\r\n        return this.document.location.href !== this.origineUrl;\r\n    }\r\n\r\n    private isXml(): void {\r\n        return this.document.XMLDocument || $.isXMLDoc(this.document);\r\n    }\r\n\r\n    public read(desiredDataType: DataType): IAjaxFileResult {\r\n        const container = this.searchContainer();\r\n\r\n        const status = extractStatus(container);\r\n        const data = parse(container.val(), desiredDataType);\r\n\r\n        return { status: status, data: data };\r\n    }\r\n\r\n    private searchContainer(): JQuery {\r\n        const container = this.document.getElementsByTagName('textarea')[0];\r\n        if (!container) {\r\n            throw 'Cannot find textarea in response';\r\n        }\r\n\r\n        return $(container);\r\n    }\r\n}\r\n\r\nfunction extractStatus(container?: JQuery): IResponseStatus {\r\n    const status: IResponseStatus = {\r\n        code: 200,\r\n        text: 'OK',\r\n        isSuccess: true\r\n    };\r\n\r\n    if (container) {\r\n        const code = Number(container.attr('statusCode')) || status.code;\r\n        status.code = code;\r\n        status.text = container.attr('statusText') || status.text;\r\n        status.isSuccess = code >= 200 && code < 300 || code === 304;\r\n    }\r\n\r\n    return status;\r\n};\r\n\r\nfunction parse(value: string, desiredDataType: DataType): any {\r\n    if (!value) {\r\n        return null;\r\n    }\r\n\r\n    switch (desiredDataType) {\r\n        case DataType.Text:\r\n            return value;\r\n        case DataType.Json:\r\n            return $.parseJSON(value);\r\n        case DataType.Xml:\r\n            const xml = $.parseXML(value);\r\n            if (xml.documentElement.nodeName === 'parsererror') {\r\n                throw 'parsererror';\r\n            }\r\n\r\n            return xml;\r\n        default:\r\n            throw 'Invalid datatype : ' + desiredDataType;\r\n    }\r\n};\r\n","function getCurrentUrlWithoutHash(): string {\r\n    const currentUrl = window.location.href;\r\n    return (currentUrl.match(/^([^#]+)/) || [])[1];\r\n}\r\n\r\nfunction currentPageIsHttpsMode(): boolean {\r\n     return urlIsHttpsMode(window.location.href);\r\n}\r\n\r\nfunction urlIsHttpsMode(url: string): boolean {\r\n    return /^https/i.test(url || '');\r\n}\r\n\r\nnamespace JsonToPostDataConverter {\r\n    'use strict';\r\n\r\n    export interface IData {\r\n        name: string;\r\n        value: string;\r\n    }\r\n\r\n    function pushParameters(results: IData[], data: any, prefix?: string): void {\r\n        if (!data) {\r\n            return;\r\n        }\r\n\r\n        for (let propertyName in data) {\r\n            if (!data.hasOwnProperty(propertyName)) {\r\n                continue;\r\n            }\r\n\r\n            const value = data[propertyName];\r\n            if (!value) {\r\n                continue;\r\n            }\r\n\r\n            pushParameterOfProperty(results, propertyName, data[propertyName], prefix);\r\n        }\r\n    };\r\n\r\n    function pushParameterOfProperty(results: IData[], propertyName: string, value: any, prefix?: string): void {\r\n        const parameterName = prefix ? prefix + '[' + propertyName + ']' : propertyName;\r\n\r\n        const type = Object.prototype.toString.call(value);\r\n\r\n        if (type === '[object Array]') {\r\n            value.forEach((item, index) => {\r\n                pushParameters(results, item, parameterName + '[' + index + ']');\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (type === '[object Object]') {\r\n            pushParameters(results, value, parameterName);\r\n            return;\r\n        }\r\n\r\n        results.push({ name: parameterName, value: value + '' });\r\n    };\r\n\r\n    export function convert(data: any): IData[] {\r\n        const result = [];\r\n\r\n        pushParameters(result, data);\r\n\r\n        return result;\r\n    };\r\n}\r\n","enum DataType {\r\n    Json,\r\n    Xml,\r\n    Text\r\n}\r\n","let ajaxFile: IAjaxFileStatic = {\r\n    send(option: IOption): IAjaxFilePromise {\r\n        option = mergeWithDefaultOption(option);\r\n\r\n        const request = new Request(option);\r\n        request.initialize();\r\n        return request.submit();\r\n    }\r\n};\r\n","namespace Form {\r\n    'use strict';\r\n\r\n    export interface IForm {\r\n        onLoaded(loadCallback: () => void): void;\r\n        submit(): void;\r\n        getResponseDocument(): FormResponseDocument;\r\n        abord(): void;\r\n        dispose(): void;\r\n    }\r\n\r\n    interface IFormFragment {\r\n        container: JQuery;\r\n        form: JQuery;\r\n        iframe: JQuery;\r\n    }\r\n\r\n    class Form {\r\n        private formFragment: IFormFragment;\r\n        private option: IOption;\r\n\r\n        constructor(option: IOption) {\r\n            this.option = option;\r\n        }\r\n\r\n        public initialize(requestId: string): void {\r\n            this.addRequestIdInData(requestId);\r\n\r\n            this.formFragment = createFormFragment(this.option, requestId);\r\n            insertFormFragment(this.formFragment);\r\n        }\r\n\r\n        private addRequestIdInData(requestId: string): void {\r\n            this.option.data.__requestId = requestId;\r\n        }\r\n\r\n        public onLoaded(loadCallback: () => void): void {\r\n            const iframe = this.formFragment.iframe;\r\n\r\n            iframe.on('load', loadCallback);\r\n        }\r\n\r\n        public submit(): void {\r\n            this.formFragment.form.submit();\r\n        }\r\n\r\n        public getResponseDocument(): FormResponseDocument {\r\n            const document = getDocumentOfIFrame(this.formFragment.iframe);\r\n            if (!document) {\r\n                throw 'server abort';\r\n            }\r\n\r\n            const orgineUrl = this.formFragment.iframe.attr('origineSrc');\r\n            return new FormResponseDocument(document, orgineUrl);\r\n        }\r\n\r\n        public abord(): void {\r\n            abordIFrame(this.formFragment.iframe);\r\n        }\r\n\r\n        public dispose(): void {\r\n            if (this.formFragment) {\r\n                this.formFragment.container.remove();\r\n\r\n                this.formFragment = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    function abordIFrame($iframe: JQuery): void {\r\n        try { // for ie\r\n            const iframe = <HTMLIFrameElement>$iframe[0];\r\n            const documentOfIFrame = iframe.contentWindow.document;\r\n            if (documentOfIFrame.execCommand) {\r\n                documentOfIFrame.execCommand('Stop');\r\n            }\r\n        } catch (ignore) {\r\n        }\r\n\r\n        $iframe.attr('src', $iframe.attr('origineSrc'));\r\n    };\r\n\r\n    function createFormFragment(option: IOption, requestId: string): IFormFragment {\r\n        option.data.__requestId = requestId;\r\n        const iframe = createIFrame(requestId, currentPageIsHttpsMode());\r\n        const form = createHtmlForm(option, requestId);\r\n\r\n        const container = $('<div></div>');\r\n        container.hide();\r\n        container.append(iframe);\r\n        container.append(form);\r\n\r\n        return { container: container, form: form, iframe: iframe };\r\n    };\r\n\r\n    function insertFormFragment(formFragment: IFormFragment): void {\r\n        formFragment.container.appendTo('body');\r\n    };\r\n\r\n    function getDocumentOfIFrame($iframe: JQuery): Document {\r\n        const iframe = <HTMLIFrameElement>$iframe[0];\r\n        try {\r\n            if (iframe.contentWindow) {\r\n                return iframe.contentWindow.document;\r\n            }\r\n        } catch (ignore) {\r\n            // ie8 access denied under ssl & missing protocol\r\n        }\r\n\r\n        try {\r\n            // simply checking may throw in ie8 under ssl or mismatched protocol\r\n            return iframe.contentDocument ? iframe.contentDocument : (<any>iframe).document;\r\n        } catch (ignore) {\r\n        }\r\n\r\n        return (<any>iframe).document;\r\n    };\r\n\r\n    function createIFrame(id: string, isHttps: boolean): JQuery {\r\n        const iframe = $('<iframe name=\"' + id + '\"></iframe>');\r\n        const src = isHttps ? 'javascript:false' : 'about:blank';\r\n        iframe.attr('src', src);\r\n        iframe.attr('origineSrc', src);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    function createHtmlForm(option: IOption, iframeId: string): JQuery {\r\n        const form = $('<form></form>');\r\n        form.attr('method', option.method);\r\n        form.attr('action', option.url);\r\n        form.attr('target', iframeId);\r\n        form.attr('encoding', 'multipart/form-data');\r\n        form.attr('enctype', 'multipart/form-data');\r\n\r\n        if (option.method.toLowerCase() === 'GET') {\r\n            applyGetMethodOnForm(form, option);\r\n        } else {\r\n            applyPostMethodOnForm(form, option);\r\n        }\r\n\r\n        cloneAndMoveInputFiles(form, option.files);\r\n\r\n        return form;\r\n    };\r\n\r\n    function cloneAndMoveInputFiles(form: JQuery, files: IFileData[]): void {\r\n        $.each(files, (num, file) => {\r\n            cloneAndMoveInputFile(form, file);\r\n        });\r\n    };\r\n\r\n    function cloneAndMoveInputFile(form: JQuery, file: IFileData): void {\r\n        const input = $(file.element);\r\n\r\n        input.replaceWith(input.clone(true, true));\r\n\r\n        input.attr('name', file.name);\r\n        input.off();\r\n\r\n        form.append(file.element);\r\n    };\r\n\r\n    function urlHasAlreadyParameters(url: string): boolean {\r\n        return url.indexOf('?') !== -1;\r\n    }\r\n\r\n    function applyGetMethodOnForm(form: JQuery, option: IOption): JQuery {\r\n        const urlParameters = $.param(option.data);\r\n\r\n        const url = option.url + (urlHasAlreadyParameters(option.url) ? '&' : '?') + urlParameters;\r\n\r\n        form.attr('action', url);\r\n\r\n        return form;\r\n    };\r\n\r\n    function applyPostMethodOnForm(form: JQuery, option: IOption): JQuery {\r\n        form.attr('action', option.url);\r\n\r\n        const parameters = JsonToPostDataConverter.convert(option.data);\r\n\r\n        $.each(parameters, (num, parameter) => {\r\n            const input = $('<input type=\"hidden\" />');\r\n            input.attr('name', parameter.name);\r\n            input.val(parameter.value);\r\n\r\n            input.appendTo(form);\r\n        });\r\n\r\n        return form;\r\n    };\r\n\r\n    export function createForm(option: IOption, requestId: string): IForm {\r\n        const form = new Form(option);\r\n        form.initialize(requestId);\r\n\r\n        return form;\r\n    };\r\n}\r\n","class AjaxFilePromise {\r\n    private abordCallback: () => void;\r\n\r\n    private promise: JQueryPromise<IAjaxFileResult>;\r\n\r\n    constructor(abordCallback: () => void, register: (success: IAjaxFileResultCallback, error: IAjaxFileResultCallback) => void) {\r\n        const deferred: JQueryDeferred<IAjaxFileResult> = $.Deferred();\r\n\r\n        this.promise = deferred.promise();\r\n        this.abordCallback = abordCallback;\r\n        register(result => deferred.resolve(result), result => deferred.reject(result));\r\n    }\r\n\r\n    public then(success?: IAjaxFileResultCallback, error?: IAjaxFileResultCallback): IAjaxFilePromise {\r\n        this.promise = this.promise.then(success, error);\r\n        return this;\r\n    }\r\n\r\n    public done(success: IAjaxFileResultCallback): IAjaxFilePromise {\r\n        this.promise = this.promise.done(success);\r\n\r\n        return this;\r\n    }\r\n\r\n    public fail(error: IAjaxFileResultCallback): IAjaxFilePromise {\r\n        this.promise = this.promise.fail(error);\r\n\r\n        return this;\r\n    }\r\n\r\n    public always(complete: IAjaxFileResultCallback): IAjaxFilePromise {\r\n        this.promise = this.promise.always(complete);\r\n\r\n        return this;\r\n    }\r\n\r\n    public abord(): void {\r\n        if (!this.abordCallback) {\r\n            this.abordCallback();\r\n        }\r\n    }\r\n}\r\n","class FormResponseHandler {\r\n    private receivedCallback: (response: IResponseDocument) => void;\r\n    private form: Form.IForm;\r\n\r\n    public onReceived(option: IOption, form: Form.IForm, receivedCallback: (response: IResponseDocument) => void): void {\r\n        this.form = form;\r\n        this.form.onLoaded(() => this.onStateUpdated());\r\n\r\n        this.receivedCallback = receivedCallback;\r\n    }\r\n\r\n    private onStateUpdated(): void {\r\n        try {\r\n            const documentOfIFrame = this.form.getResponseDocument();\r\n            if (!documentOfIFrame) {\r\n                this.receivedCallback(createErrorResponseDocument('server abort'));\r\n                return;\r\n            }\r\n\r\n            if (!documentOfIFrame.isLoaded()) {\r\n                setTimeout(() => this.onStateUpdated(), 250);\r\n                return;\r\n            }\r\n\r\n            this.receivedCallback(documentOfIFrame);\r\n        } catch (error) {\r\n            this.receivedCallback(createErrorResponseDocument(error));\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.form) {\r\n            this.form.dispose();\r\n            this.form = null;\r\n        }\r\n\r\n        this.receivedCallback = null;\r\n    }\r\n}\r\n","interface IReponseHandler {\r\n    onReceived(option: IOption, form: Form.IForm, receivedCallback: (response: IResponseDocument) => void): void;\r\n\r\n    dispose(): void;\r\n}\r\n\r\nclass ReponseHandlerDispatcher {\r\n    private handlers: IReponseHandler[];\r\n\r\n    constructor(id: string) {\r\n        const cookieHandler: IReponseHandler = new CookieReponseHandler(id);\r\n        this.handlers = [\r\n            new TimeoutResponseHandler(),\r\n            new FormResponseHandler(),\r\n            cookieHandler\r\n        ];\r\n    }\r\n\r\n    public onReceived(option: IOption, form: Form.IForm, receivedCallback: (response: IResponseDocument) => void): void {\r\n        this.handlers.forEach((handler) => {\r\n            handler.onReceived(option, form, receivedCallback);\r\n        });\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.handlers.forEach((handler) => {\r\n            handler.dispose();\r\n        });\r\n    }\r\n}\r\n","class TimeoutResponseHandler {\r\n    private timeoutHandle: number;\r\n\r\n    public onReceived(option: IOption, form: Form.IForm, receivedCallback: (response: IResponseDocument) => void): void {\r\n        this.dispose();\r\n\r\n        if (option.timeoutInSeconds) {\r\n            const timeoutInMilliseconds = option.timeoutInSeconds * 1000;\r\n            this.timeoutHandle = setTimeout(() => {\r\n                receivedCallback(createErrorResponseDocument('Timeout'));\r\n            }, timeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n            this.timeoutHandle = null;\r\n        }\r\n    }\r\n}\r\n","function map<TOutput, TInput>(data: TInput[], callback: (value: TInput) => TOutput): TOutput[] {\r\n    if (typeof callback !== 'function') {\r\n        throw new TypeError();\r\n    }\r\n\r\n    const arrayLength = data.length;\r\n    const result = new Array(arrayLength);\r\n    for (let i = 0; i < arrayLength; i++) {\r\n        if (i in data) {\r\n            result[i] = callback.call(undefined, data[i]);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nif (!Array.prototype.forEach) {\r\n    Array.prototype.forEach = function(fn: (value: any, index: number, array: any[]) => void, scope: any): void {\r\n        for (let i = 0, len = this.length; i < len; ++i) {\r\n            fn.call(scope, this[i], i, this);\r\n        }\r\n    };\r\n}\r\n"],"sourceRoot":"/source/"}