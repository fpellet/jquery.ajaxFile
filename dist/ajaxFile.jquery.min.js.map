{"version":3,"sources":["ajaxFile.jquery.js","AjaxFile.ts","AjaxFilePromise.ts","Form.ts","CookieReponseHandler.ts","FormResponseHandler.ts","Interfaces.ts","Option.ts","ReponseHandlerDispatcher.ts","Request.ts","ResponseDocument.ts","TimeoutResponseHandler.ts","Utils.ts","Url.ts","jquery/AjaxFileJQuery.ts","jquery/EventTrigger.ts","jquery/Option.ts","jquery/Request.ts"],"names":["factory","define","amd","window","AjaxFile","jQuery","Zepto","$","Form","AjaxFilePromise","AjaxFilePromise.constructor","AjaxFilePromise.then","AjaxFilePromise.done","AjaxFilePromise.fail","AjaxFilePromise.always","AjaxFilePromise.abord","readCookie","name","value","document","cookie","match","decodeURIComponent","hasCookie","indexOf","clearCookie","CookieReponseHandler","CookieReponseHandler.constructor","CookieReponseHandler.onReceived","CookieReponseHandler.checkCookie","CookieReponseHandler.dispose","Form_1","Form.Form","Form.Form.constructor","Form.Form.initialize","Form.Form.addRequestIdInData","Form.Form.onLoaded","Form.Form.submit","Form.Form.getResponseDocument","Form.Form.abord","Form.Form.dispose","DataType","FormResponseHandler","FormResponseHandler.onReceived","FormResponseHandler.onStateUpdated","FormResponseHandler.dispose","defaultOption","data","files","desiredResponseDataType","Json","method","timeoutInSeconds","mergeWithDefaultOption","option","extend","url","getCurrentUrlWithoutHash","ReponseHandlerDispatcher","ReponseHandlerDispatcher.constructor","ReponseHandlerDispatcher.onReceived","ReponseHandlerDispatcher.dispose","generateRequestId","Date","getTime","Request","Request.constructor","Request.initialize","Request.submit","Request.send","Request.onResponseReceived","Request.abord","Request.onError","Request.dispose","createErrorResponseDocument","error","read","createCookieResponseDocument","desiredDataType","FormResponseDocument","FormResponseDocument.constructor","FormResponseDocument.isLoaded","FormResponseDocument.hrefHasChanged","FormResponseDocument.isXml","FormResponseDocument.read","FormResponseDocument.searchContainer","extractStatus","container","status","code","text","isSuccess","Number","attr","parse","Text","parseJSON","Xml","xml","parseXML","documentElement","nodeName","TimeoutResponseHandler","TimeoutResponseHandler.onReceived","TimeoutResponseHandler.dispose","Array","prototype","forEach","fn","scope","i","len","this","length","call","JsonToPostDataConverter","currentUrl","location","href","currentPageIsHttpsMode","urlIsHttpsMode","test","AjaxFileJQuery","JQueryEventTrigger","convertToDataType","dataType","toLowerCase","convertJqueryOptionToOption","jqueryOption","type","timeout","generateJqueryXHR","result","queryOption","promise","readyState","statusText","responseXML","responseText","abort","abord","setRequestHeader","getAllResponseHeaders","getResponseHeader","header","undefined"],"mappings":"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","file":"ajaxFile.jquery.min.js","sourcesContent":["/*!\r\n * AjaxFile.js - V0.0.2\r\n * Project repository: https://github.com/fpellet/jquery.ajaxFile\r\n * Licensed under the MIT license\r\n */\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else {\n        window.AjaxFile = factory(typeof jQuery != 'undefined' ? jQuery : window.Zepto);\n    }\n}(function ($) {\n    'use strict';\n    var AjaxFile;\n    (function (AjaxFile) {\n        AjaxFile.send = function (option) {\n            option = mergeWithDefaultOption(option);\n            var request = new Request(option);\n            request.initialize();\n            return request.submit();\n        };\n    }(AjaxFile || (AjaxFile = {})));\n    var AjaxFilePromise = function () {\n        function AjaxFilePromise(abordCallback, register) {\n            var deferred = $.Deferred();\n            this.promise = deferred.promise();\n            this.abordCallback = abordCallback;\n            register(function (result) {\n                return deferred.resolve(result);\n            }, function (result) {\n                return deferred.reject(result);\n            });\n        }\n        AjaxFilePromise.prototype.then = function (success, error) {\n            this.promise = this.promise.then(success, error);\n            return this;\n        };\n        AjaxFilePromise.prototype.done = function (success) {\n            this.promise = this.promise.done(success);\n            return this;\n        };\n        AjaxFilePromise.prototype.fail = function (error) {\n            this.promise = this.promise.fail(error);\n            return this;\n        };\n        AjaxFilePromise.prototype.always = function (complete) {\n            this.promise = this.promise.always(complete);\n            return this;\n        };\n        AjaxFilePromise.prototype.abord = function () {\n            if (!this.abordCallback) {\n                this.abordCallback();\n            }\n        };\n        return AjaxFilePromise;\n    }();\n    var readCookie = function (name) {\n        var value = (document.cookie.match('(^|; )' + name + '=([^;]*)') || 0)[2];\n        return decodeURIComponent(value) || null;\n    };\n    var hasCookie = function (name) {\n        return document.cookie.indexOf(name + '=') != -1;\n    };\n    var clearCookie = function (name) {\n        document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n    };\n    var CookieReponseHandler = function () {\n        function CookieReponseHandler(id) {\n            this.cookieName = id;\n        }\n        CookieReponseHandler.prototype.onReceived = function (option, form, receivedCallback) {\n            var _this = this;\n            this.receivedCallback = receivedCallback;\n            setTimeout(function () {\n                return _this.checkCookie();\n            }, 100);\n        };\n        CookieReponseHandler.prototype.checkCookie = function () {\n            var _this = this;\n            if (this.disposed) {\n                return;\n            }\n            if (!hasCookie(this.cookieName)) {\n                setTimeout(function () {\n                    return _this.checkCookie();\n                }, 100);\n                return;\n            }\n            var value = readCookie(this.cookieName);\n            var response = createCookieResponseDocument(value);\n            this.receivedCallback(response);\n        };\n        CookieReponseHandler.prototype.dispose = function () {\n            this.disposed = true;\n            clearCookie(this.cookieName);\n            this.receivedCallback = null;\n        };\n        return CookieReponseHandler;\n    }();\n    var Form;\n    (function (Form_1) {\n        var Form = function () {\n            function Form(option) {\n                this.option = option;\n            }\n            Form.prototype.initialize = function (requestId) {\n                this.addRequestIdInData(requestId);\n                this.formFragment = createFormFragment(this.option, requestId);\n                insertFormFragment(this.formFragment);\n            };\n            Form.prototype.addRequestIdInData = function (requestId) {\n                this.option.data.__requestId = requestId;\n            };\n            Form.prototype.onLoaded = function (loadCallback) {\n                var iframe = this.formFragment.iframe;\n                iframe.on('load', loadCallback);\n            };\n            Form.prototype.submit = function () {\n                this.formFragment.form.submit();\n            };\n            Form.prototype.getResponseDocument = function () {\n                var document = getDocumentOfIFrame(this.formFragment.iframe);\n                if (!document) {\n                    throw 'server abort';\n                }\n                var orgineUrl = this.formFragment.iframe.attr('origineSrc');\n                return new FormResponseDocument(document, orgineUrl);\n            };\n            Form.prototype.abord = function () {\n                abordIFrame(this.formFragment.iframe);\n            };\n            Form.prototype.dispose = function () {\n                if (this.formFragment) {\n                    this.formFragment.container.remove();\n                    this.formFragment = null;\n                }\n            };\n            return Form;\n        }();\n        var abordIFrame = function ($iframe) {\n            try {\n                var iframe = $iframe[0];\n                var documentOfIFrame = iframe.contentWindow.document;\n                if (documentOfIFrame.execCommand) {\n                    documentOfIFrame.execCommand('Stop');\n                }\n            } catch (ignore) {\n            }\n            $iframe.attr('src', $iframe.attr('origineSrc'));\n        };\n        var createFormFragment = function (option, requestId) {\n            option.data.__requestId = requestId;\n            var iframe = createIFrame(requestId, currentPageIsHttpsMode());\n            var form = createHtmlForm(option, requestId);\n            var container = $('<div></div>');\n            container.hide();\n            container.append(iframe);\n            container.append(form);\n            return {\n                container: container,\n                form: form,\n                iframe: iframe\n            };\n        };\n        var insertFormFragment = function (formFragment) {\n            formFragment.container.appendTo('body');\n        };\n        var getDocumentOfIFrame = function ($iframe) {\n            var iframe = $iframe[0];\n            try {\n                if (iframe.contentWindow) {\n                    return iframe.contentWindow.document;\n                }\n            } catch (ignore) {\n            }\n            try {\n                // simply checking may throw in ie8 under ssl or mismatched protocol\n                return iframe.contentDocument ? iframe.contentDocument : iframe.document;\n            } catch (ignore) {\n            }\n            return iframe.document;\n        };\n        var createIFrame = function (id, isHttps) {\n            var iframe = $('<iframe name=\"' + id + '\"></iframe>');\n            var src = isHttps ? 'javascript:false' : 'about:blank';\n            iframe.attr('src', src);\n            iframe.attr('origineSrc', src);\n            return iframe;\n        };\n        var createHtmlForm = function (option, iframeId) {\n            var form = $('<form></form>');\n            form.attr('method', option.method);\n            form.attr('action', option.url);\n            form.attr('target', iframeId);\n            form.attr('encoding', 'multipart/form-data');\n            form.attr('enctype', 'multipart/form-data');\n            if (option.method.toLowerCase() == 'GET') {\n                applyGetMethodOnForm(form, option);\n            } else {\n                applyPostMethodOnForm(form, option);\n            }\n            cloneAndMoveInputFiles(form, option.files);\n            return form;\n        };\n        var cloneAndMoveInputFiles = function (form, files) {\n            $.each(files, function (num, file) {\n                cloneAndMoveInputFile(form, file);\n            });\n        };\n        var cloneAndMoveInputFile = function (form, file) {\n            var input = $(file.element);\n            input.replaceWith(input.clone(true, true));\n            input.attr('name', file.name);\n            input.off();\n            form.append(file.element);\n        };\n        var urlHasAlreadyParameters = function (url) {\n            return url.indexOf('?') != -1;\n        };\n        var applyGetMethodOnForm = function (form, option) {\n            var urlParameters = $.param(option.data);\n            var url = option.url + (urlHasAlreadyParameters(option.url) ? '&' : '?') + urlParameters;\n            form.attr('action', url);\n            return form;\n        };\n        var applyPostMethodOnForm = function (form, option) {\n            form.attr('action', option.url);\n            var parameters = JsonToPostDataConverter.convert(option.data);\n            $.each(parameters, function (num, parameter) {\n                var input = $('<input type=\"hidden\" />');\n                input.attr('name', parameter.name);\n                input.val(parameter.value);\n                input.appendTo(form);\n            });\n            return form;\n        };\n        Form_1.createForm = function (option, requestId) {\n            var form = new Form(option);\n            form.initialize(requestId);\n            return form;\n        };\n    }(Form || (Form = {})));\n    var FormResponseHandler = function () {\n        function FormResponseHandler() {\n        }\n        FormResponseHandler.prototype.onReceived = function (option, form, receivedCallback) {\n            var _this = this;\n            this.form = form;\n            this.form.onLoaded(function () {\n                return _this.onStateUpdated();\n            });\n            this.receivedCallback = receivedCallback;\n        };\n        FormResponseHandler.prototype.onStateUpdated = function () {\n            var _this = this;\n            try {\n                var documentOfIFrame = this.form.getResponseDocument();\n                if (!documentOfIFrame) {\n                    this.receivedCallback(createErrorResponseDocument('server abort'));\n                    return;\n                }\n                if (!documentOfIFrame.isLoaded()) {\n                    setTimeout(function () {\n                        return _this.onStateUpdated();\n                    }, 250);\n                    return;\n                }\n                this.receivedCallback(documentOfIFrame);\n            } catch (error) {\n                this.receivedCallback(createErrorResponseDocument(error));\n            }\n        };\n        FormResponseHandler.prototype.dispose = function () {\n            if (this.form) {\n                this.form.dispose();\n                this.form = null;\n            }\n            this.receivedCallback = null;\n        };\n        return FormResponseHandler;\n    }();\n    var DataType;\n    (function (DataType) {\n        DataType[DataType['Json'] = 0] = 'Json';\n        DataType[DataType['Xml'] = 1] = 'Xml';\n        DataType[DataType['Text'] = 2] = 'Text';\n    }(DataType || (DataType = {})));\n    var defaultOption = {\n        data: {},\n        files: [],\n        desiredResponseDataType: DataType.Json,\n        method: 'POST',\n        timeoutInSeconds: 60\n    };\n    var mergeWithDefaultOption = function (option) {\n        option = $.extend(true, {}, defaultOption, option);\n        if (!option.url) {\n            option.url = getCurrentUrlWithoutHash();\n        }\n        return option;\n    };\n    var ReponseHandlerDispatcher = function () {\n        function ReponseHandlerDispatcher(id) {\n            var cookieHandler = new CookieReponseHandler(id);\n            this.handlers = [\n                new TimeoutResponseHandler(),\n                new FormResponseHandler(),\n                cookieHandler\n            ];\n        }\n        ReponseHandlerDispatcher.prototype.onReceived = function (option, form, receivedCallback) {\n            this.handlers.forEach(function (handler) {\n                handler.onReceived(option, form, receivedCallback);\n            });\n        };\n        ReponseHandlerDispatcher.prototype.dispose = function () {\n            this.handlers.forEach(function (handler) {\n                handler.dispose();\n            });\n        };\n        return ReponseHandlerDispatcher;\n    }();\n    var generateRequestId = function () {\n        return 'ajaxFile' + new Date().getTime();\n    };\n    var Request = function () {\n        function Request(option) {\n            this.option = option;\n            this.id = generateRequestId();\n            this.responseHandler = new ReponseHandlerDispatcher(this.id);\n        }\n        Request.prototype.initialize = function () {\n            this.form = Form.createForm(this.option, this.id);\n        };\n        Request.prototype.submit = function () {\n            var _this = this;\n            var promise = new AjaxFilePromise(function () {\n                return _this.abord();\n            }, function (successCallback, errorCallback) {\n                _this.successCallback = successCallback;\n                _this.errorCallback = errorCallback;\n            });\n            setTimeout(function () {\n                return _this.send();\n            }, 10);\n            return promise.always(function () {\n                return _this.dispose();\n            });\n        };\n        Request.prototype.send = function () {\n            var _this = this;\n            if (this.isCompleted) {\n                return;\n            }\n            this.responseHandler.onReceived(this.option, this.form, function (response) {\n                return _this.onResponseReceived(response);\n            });\n            try {\n                this.form.submit();\n            } catch (err) {\n                this.onError('error', err);\n            }\n        };\n        Request.prototype.onResponseReceived = function (response) {\n            if (this.isCompleted) {\n                return;\n            }\n            try {\n                var result = response.read(this.option.desiredResponseDataType);\n                if (result.status.isSuccess) {\n                    this.successCallback(result);\n                } else {\n                    this.errorCallback(result);\n                }\n            } catch (error) {\n                this.onError('error', error);\n            }\n            this.isCompleted = true;\n        };\n        Request.prototype.abord = function (reason) {\n            this.onError(reason || 'cancelled');\n        };\n        Request.prototype.onError = function (error, status, data) {\n            if (this.isCompleted) {\n                return;\n            }\n            this.isCompleted = true;\n            this.form.abord();\n            this.errorCallback({\n                status: status,\n                data: data,\n                error: error\n            });\n        };\n        Request.prototype.dispose = function () {\n            this.isCompleted = true;\n            if (this.form) {\n                this.form.dispose();\n                this.form = null;\n            }\n            if (this.responseHandler) {\n                this.responseHandler.dispose();\n                this.responseHandler = null;\n            }\n        };\n        return Request;\n    }();\n    var createErrorResponseDocument = function (error) {\n        return {\n            read: function () {\n                throw error;\n            }\n        };\n    };\n    var createCookieResponseDocument = function (value) {\n        return {\n            read: function (desiredDataType) {\n                var data = parse(value, desiredDataType);\n                return {\n                    status: extractStatus(),\n                    data: data\n                };\n            }\n        };\n    };\n    var FormResponseDocument = function () {\n        function FormResponseDocument(document, origineUrl) {\n            this.document = document;\n            this.origineUrl = origineUrl;\n        }\n        FormResponseDocument.prototype.isLoaded = function () {\n            if (!this.hrefHasChanged()) {\n                return false;\n            }\n            if (this.isXml()) {\n                return true;\n            }\n            return this.document.body !== null && !!this.document.body.innerHTML;\n        };\n        FormResponseDocument.prototype.hrefHasChanged = function () {\n            return this.document.location.href != this.origineUrl;\n        };\n        FormResponseDocument.prototype.isXml = function () {\n            return this.document.XMLDocument || $.isXMLDoc(this.document);\n        };\n        FormResponseDocument.prototype.read = function (desiredDataType) {\n            var container = this.searchContainer();\n            var status = extractStatus(container);\n            var data = parse(container.val(), desiredDataType);\n            return {\n                status: status,\n                data: data\n            };\n        };\n        FormResponseDocument.prototype.searchContainer = function () {\n            var container = this.document.getElementsByTagName('textarea')[0];\n            if (!container) {\n                throw 'Cannot find textarea in response';\n            }\n            return $(container);\n        };\n        return FormResponseDocument;\n    }();\n    var extractStatus = function (container) {\n        var status = {\n            code: 200,\n            text: 'OK',\n            isSuccess: true\n        };\n        if (container) {\n            var code = Number(container.attr('statusCode')) || status.code;\n            status.code = code;\n            status.text = container.attr('statusText') || status.text;\n            status.isSuccess = code >= 200 && code < 300 || code === 304;\n        }\n        ;\n        return status;\n    };\n    var parse = function (value, desiredDataType) {\n        if (!value) {\n            return null;\n        }\n        if (desiredDataType == DataType.Text) {\n            return value;\n        }\n        if (desiredDataType == DataType.Json) {\n            return $.parseJSON(value);\n        }\n        if (desiredDataType == DataType.Xml) {\n            var xml = $.parseXML(value);\n            if (xml.documentElement.nodeName === 'parsererror') {\n                throw 'parsererror';\n            }\n            return xml;\n        }\n        throw 'Invalid datatype : ' + desiredDataType;\n    };\n    var TimeoutResponseHandler = function () {\n        function TimeoutResponseHandler() {\n        }\n        TimeoutResponseHandler.prototype.onReceived = function (option, form, receivedCallback) {\n            this.dispose();\n            if (option.timeoutInSeconds) {\n                var timeoutInMilliseconds = option.timeoutInSeconds * 1000;\n                this.timeoutHandle = setTimeout(function () {\n                    receivedCallback(createErrorResponseDocument('Timeout'));\n                }, timeoutInMilliseconds);\n            }\n        };\n        TimeoutResponseHandler.prototype.dispose = function () {\n            if (this.timeoutHandle) {\n                clearTimeout(this.timeoutHandle);\n                this.timeoutHandle = null;\n            }\n        };\n        return TimeoutResponseHandler;\n    }();\n    var map = function (data, callback) {\n        if (typeof callback != 'function') {\n            throw new TypeError();\n        }\n        var arrayLength = data.length;\n        var result = new Array(arrayLength);\n        for (var i = 0; i < arrayLength; i++) {\n            if (i in data) {\n                result[i] = callback.call(undefined, data[i]);\n            }\n        }\n        return result;\n    };\n    if (!Array.prototype.forEach) {\n        Array.prototype.forEach = function (fn, scope) {\n            for (var i = 0, len = this.length; i < len; ++i) {\n                fn.call(scope, this[i], i, this);\n            }\n        };\n    }\n    /// <reference path=\"utils.ts\" />\n    var getCurrentUrlWithoutHash = function () {\n        var currentUrl = window.location.href;\n        return (currentUrl.match(/^([^#]+)/) || [])[1];\n    };\n    var currentPageIsHttpsMode = function () {\n        return urlIsHttpsMode(window.location.href);\n    };\n    var urlIsHttpsMode = function (url) {\n        return /^https/i.test(url || '');\n    };\n    var JsonToPostDataConverter;\n    (function (JsonToPostDataConverter) {\n        var pushParameters = function (results, data, prefix) {\n            if (!data) {\n                return;\n            }\n            for (var propertyName in data) {\n                var value = data[propertyName];\n                if (!value)\n                    continue;\n                pushParameterOfProperty(results, propertyName, data[propertyName], prefix);\n            }\n        };\n        var pushParameterOfProperty = function (results, propertyName, value, prefix) {\n            var parameterName = prefix ? prefix + '[' + propertyName + ']' : propertyName;\n            var type = Object.prototype.toString.call(value);\n            if (type === '[object Array]') {\n                value.forEach(function (item, index) {\n                    pushParameters(results, item, parameterName + '[' + index + ']');\n                });\n                return;\n            }\n            if (type == '[object Object]') {\n                pushParameters(results, value, parameterName);\n                return;\n            }\n            results.push({\n                name: parameterName,\n                value: value + ''\n            });\n        };\n        JsonToPostDataConverter.convert = function (data) {\n            var result = [];\n            pushParameters(result, data);\n            return result;\n        };\n    }(JsonToPostDataConverter || (JsonToPostDataConverter = {})));\n    var AjaxFileJQuery;\n    (function (AjaxFileJQuery) {\n        var convertAjaxFilePromiseToDeferred = function (promise, queryOption, option) {\n            var deferred = $.Deferred();\n            var eventTrigger = JQueryEventTrigger;\n            eventTrigger.send(option, generateJqueryXHR(null, queryOption, option, promise));\n            promise.then(function (result) {\n                var xhr = generateJqueryXHR(result, queryOption, option, promise);\n                deferred.resolve(result.data, result.status && result.status.text, xhr);\n                eventTrigger.success(option, xhr);\n            }).fail(function (result) {\n                var xhr = generateJqueryXHR(result, queryOption, option, promise);\n                deferred.reject(xhr, result.status && result.status.text, result.error);\n                eventTrigger.error(option, xhr, result.error);\n            });\n            if (queryOption.error) {\n                deferred.fail(queryOption.error);\n            }\n            if (queryOption.success) {\n                deferred.done(queryOption.success);\n            }\n            if (queryOption.complete) {\n                deferred.always(queryOption.complete);\n            }\n            return deferred;\n        };\n        var generateOption = function (jqueryOption) {\n            var option = convertJqueryOptionToOption(jqueryOption);\n            var defaultSettings = convertJqueryOptionToOption($.ajaxSettings);\n            return $.extend(true, {}, defaultSettings, defaultOption, option);\n        };\n        $.fn.ajaxWithFile = function (jqueryOption) {\n            var option = generateOption(jqueryOption);\n            var result = AjaxFile.send(option);\n            return convertAjaxFilePromiseToDeferred(result, jqueryOption, option);\n        };\n    }(AjaxFileJQuery || (AjaxFileJQuery = {})));\n    var JQueryEventTrigger;\n    (function (JQueryEventTrigger) {\n        JQueryEventTrigger.send = function (option, xmlHttpRequest) {\n            if ($.active++ === 0) {\n                sendGlobalEvent(option, 'ajaxStart');\n            }\n            sendGlobalEvent(option, 'ajaxSend', [\n                xmlHttpRequest,\n                option\n            ]);\n        };\n        JQueryEventTrigger.error = function (option, xmlHttpRequest, errorThrown) {\n            sendGlobalEvent(option, 'ajaxError', [\n                xmlHttpRequest,\n                option,\n                errorThrown\n            ]);\n            completed(option, xmlHttpRequest);\n        };\n        JQueryEventTrigger.success = function (option, xmlHttpRequest) {\n            sendGlobalEvent(option, 'ajaxSuccess', [\n                xmlHttpRequest,\n                option\n            ]);\n            completed(option, xmlHttpRequest);\n        };\n        var completed = function (option, xmlHttpRequest) {\n            sendGlobalEvent(option, 'ajaxComplete', [\n                xmlHttpRequest,\n                option\n            ]);\n            if (!--$.active) {\n                sendGlobalEvent(option, 'ajaxStop');\n            }\n        };\n        var sendGlobalEvent = function (option, eventName, parameters) {\n            if (!option.global) {\n                return;\n            }\n            $.event.trigger(eventName, parameters);\n        };\n    }(JQueryEventTrigger || (JQueryEventTrigger = {})));\n    ;\n    var convertToDataType = function (dataType) {\n        dataType = dataType && dataType.toLowerCase();\n        if (dataType == 'xml') {\n            return DataType.Xml;\n        } else if (dataType == 'text') {\n            return DataType.Text;\n        }\n        return DataType.Json;\n    };\n    var convertJqueryOptionToOption = function (jqueryOption) {\n        return {\n            method: jqueryOption.type,\n            url: jqueryOption.url,\n            data: jqueryOption.data,\n            files: jqueryOption.files,\n            desiredResponseDataType: convertToDataType(jqueryOption.dataType),\n            timeoutInSeconds: (jqueryOption.timeout || 0) * 10000\n        };\n    };\n    var generateJqueryXHR = function (result, queryOption, option, promise) {\n        result = result || {};\n        var status = result.status;\n        return {\n            readyState: 0,\n            status: status && status.code || 0,\n            statusText: status && status.text || 'n/a',\n            responseXML: option.desiredResponseDataType == DataType.Xml ? result.data : null,\n            responseText: option.desiredResponseDataType == DataType.Text ? result.data : null,\n            abort: function () {\n                promise.abord();\n            },\n            setRequestHeader: function () {\n                throw 'not supported';\n            },\n            getAllResponseHeaders: function () {\n                return '';\n            },\n            getResponseHeader: function (header) {\n                return header.toLowerCase() == 'content-type' ? queryOption.dataType : undefined;\n            }\n        };\n    };\n    return AjaxFile;\n}));","/// <reference path=\"../typings/jquery/jquery.d.ts\" />\r\n\r\nmodule AjaxFile {\r\n    export var send = (option: IOption): IAjaxFilePromise => {\r\n        option = mergeWithDefaultOption(option);\r\n\r\n        var request = new Request(option);\r\n        request.initialize();\r\n        return request.submit();\r\n    }\r\n}","class AjaxFilePromise {\r\n    private abordCallback: () => void;\r\n\r\n    private promise: JQueryPromise<IAjaxFileResult>;\r\n\r\n    constructor(abordCallback: () => void, register: (success: IAjaxFileResultCallback, error: IAjaxFileResultCallback) => void) {\r\n        var deferred: JQueryDeferred<IAjaxFileResult> = $.Deferred();\r\n\r\n        this.promise = deferred.promise();\r\n        this.abordCallback = abordCallback;\r\n        register(result => deferred.resolve(result), result => deferred.reject(result));\r\n    }\r\n\r\n    then(success?: IAjaxFileResultCallback, error?: IAjaxFileResultCallback): IAjaxFilePromise {\r\n        this.promise = this.promise.then(success, error);\r\n        return this;\r\n    }\r\n\r\n    done(success: IAjaxFileResultCallback): IAjaxFilePromise {\r\n        this.promise = this.promise.done(success);\r\n\r\n        return this;\r\n    }\r\n\r\n    fail(error: IAjaxFileResultCallback): IAjaxFilePromise {\r\n        this.promise = this.promise.fail(error);\r\n\r\n        return this;\r\n    }\r\n\r\n    always(complete: IAjaxFileResultCallback): IAjaxFilePromise {\r\n        this.promise = this.promise.always(complete);\r\n\r\n        return this;\r\n    }\r\n\r\n    abord() {\r\n        if (!this.abordCallback) {\r\n            this.abordCallback();\r\n        }\r\n    }\r\n} ","module Form {\r\n    export interface IForm {\r\n        onLoaded(loadCallback: () => void): void;\r\n        submit(): void;\r\n        getResponseDocument(): FormResponseDocument;\r\n        abord(): void;\r\n        dispose(): void;\r\n    }\r\n\r\n    interface IFormFragment {\r\n        container: JQuery;\r\n        form: JQuery;\r\n        iframe: JQuery;\r\n    }\r\n\r\n    class Form {\r\n        private formFragment: IFormFragment;\r\n        private option: IOption;\r\n\r\n        constructor(option: IOption) {\r\n            this.option = option;\r\n        }\r\n\r\n        initialize(requestId: string) {\r\n            this.addRequestIdInData(requestId);\r\n\r\n            this.formFragment = createFormFragment(this.option, requestId);\r\n            insertFormFragment(this.formFragment);\r\n        }\r\n\r\n        private addRequestIdInData(requestId: string) {\r\n            this.option.data.__requestId = requestId;\r\n        }\r\n\r\n        onLoaded(loadCallback: () => void) {\r\n            var iframe = this.formFragment.iframe;\r\n\r\n            iframe.on('load', loadCallback);\r\n        }\r\n\r\n        submit() {\r\n            this.formFragment.form.submit();\r\n        }\r\n\r\n        getResponseDocument(): FormResponseDocument {\r\n            var document = getDocumentOfIFrame(this.formFragment.iframe);\r\n            if (!document) {\r\n                throw 'server abort';\r\n            }\r\n\r\n            var orgineUrl = this.formFragment.iframe.attr('origineSrc');\r\n            return new FormResponseDocument(document, orgineUrl);\r\n        }\r\n\r\n        abord() {\r\n            abordIFrame(this.formFragment.iframe);\r\n        }\r\n\r\n        dispose() {\r\n            if (this.formFragment) {\r\n                this.formFragment.container.remove();\r\n\r\n                this.formFragment = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    var abordIFrame = ($iframe: JQuery) => {\r\n        try { // for ie\r\n            var iframe = <HTMLIFrameElement>$iframe[0];\r\n            var documentOfIFrame = iframe.contentWindow.document;\r\n            if (documentOfIFrame.execCommand) {\r\n                documentOfIFrame.execCommand('Stop');\r\n            }\r\n        } catch (ignore) {\r\n        }\r\n\r\n        $iframe.attr('src', $iframe.attr('origineSrc'));\r\n    };\r\n\r\n    var createFormFragment = (option: IOption, requestId: string): IFormFragment => {\r\n        option.data.__requestId = requestId;\r\n        var iframe = createIFrame(requestId, currentPageIsHttpsMode());\r\n        var form = createHtmlForm(option, requestId);\r\n\r\n        var container = $('<div></div>');\r\n        container.hide();\r\n        container.append(iframe);\r\n        container.append(form);\r\n\r\n        return { container: container, form: form, iframe: iframe };\r\n    };\r\n\r\n    var insertFormFragment = (formFragment: IFormFragment) => {\r\n        formFragment.container.appendTo('body');\r\n    };\r\n\r\n    var getDocumentOfIFrame = ($iframe: JQuery): Document => {\r\n        var iframe = <HTMLIFrameElement>$iframe[0];\r\n        try {\r\n            if (iframe.contentWindow) {\r\n                return iframe.contentWindow.document;\r\n            }\r\n        } catch (ignore) {\r\n            // IE8 access denied under ssl & missing protocol\r\n        }\r\n\r\n        try {\r\n            // simply checking may throw in ie8 under ssl or mismatched protocol\r\n            return iframe.contentDocument ? iframe.contentDocument : (<any>iframe).document;\r\n        } catch (ignore) {\r\n        }\r\n\r\n        return (<any>iframe).document;\r\n    };\r\n\r\n    var createIFrame = (id: string, isHttps: boolean): JQuery => {\r\n        var iframe = $('<iframe name=\"' + id + '\"></iframe>');\r\n        var src = isHttps ? 'javascript:false' : 'about:blank';\r\n        iframe.attr('src', src);\r\n        iframe.attr('origineSrc', src);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    var createHtmlForm = (option: IOption, iframeId: string): JQuery => {\r\n        var form = $('<form></form>');\r\n        form.attr('method', option.method);\r\n        form.attr('action', option.url);\r\n        form.attr('target', iframeId);\r\n        form.attr('encoding', \"multipart/form-data\");\r\n        form.attr('enctype', \"multipart/form-data\");\r\n\r\n        if (option.method.toLowerCase() == 'GET') {\r\n            applyGetMethodOnForm(form, option);\r\n        } else {\r\n            applyPostMethodOnForm(form, option);\r\n        }\r\n\r\n        cloneAndMoveInputFiles(form, option.files);\r\n\r\n        return form;\r\n    };\r\n\r\n    var cloneAndMoveInputFiles = (form: JQuery, files: IFileData[]) => {\r\n        $.each(files, (num, file) => {\r\n            cloneAndMoveInputFile(form, file);\r\n        });\r\n    };\r\n\r\n    var cloneAndMoveInputFile = (form: JQuery, file: IFileData) => {\r\n        var input = $(file.element);\r\n\r\n        input.replaceWith(input.clone(true, true));\r\n\r\n        input.attr('name', file.name);\r\n        input.off();\r\n\r\n        form.append(file.element);\r\n    };\r\n\r\n    var urlHasAlreadyParameters = (url: string): boolean => url.indexOf('?') != -1;\r\n\r\n    var applyGetMethodOnForm = (form: JQuery, option: IOption): JQuery => {\r\n        var urlParameters = $.param(option.data);\r\n\r\n        var url = option.url + (urlHasAlreadyParameters(option.url) ? '&' : '?') + urlParameters;\r\n\r\n        form.attr('action', url);\r\n\r\n        return form;\r\n    };\r\n\r\n    var applyPostMethodOnForm = (form: JQuery, option: IOption): JQuery => {\r\n        form.attr('action', option.url);\r\n\r\n        var parameters = JsonToPostDataConverter.convert(option.data);\r\n\r\n        $.each(parameters, (num, parameter) => {\r\n            var input = $('<input type=\"hidden\" />');\r\n            input.attr('name', parameter.name);\r\n            input.val(parameter.value);\r\n\r\n            input.appendTo(form);\r\n        });\r\n\r\n        return form;\r\n    };\r\n\r\n    export var createForm = (option: IOption, requestId: string): IForm => {\r\n        var form = new Form(option);\r\n        form.initialize(requestId);\r\n\r\n        return form;\r\n    };\r\n}","var readCookie = (name: string) => {\r\n    var value = (document.cookie.match('(^|; )' + name + '=([^;]*)') || 0)[2];\r\n\r\n    return decodeURIComponent(value) || null;\r\n};\r\n\r\nvar hasCookie = (name: string): boolean => {\r\n    return document.cookie.indexOf(name + \"=\") != -1;\r\n};\r\n\r\nvar clearCookie = (name: string) => {\r\n    document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n};\r\n\r\nclass CookieReponseHandler {\r\n    private cookieName: string;\r\n    private receivedCallback: (response: IResponseDocument) => void;\r\n    private disposed: boolean;\r\n\r\n    constructor(id: string) {\r\n        this.cookieName = id;\r\n    }\r\n\r\n    onReceived(option: IOption, form: Form.IForm, receivedCallback: (response: IResponseDocument) => void) {\r\n        this.receivedCallback = receivedCallback;\r\n\r\n        setTimeout(() => this.checkCookie(), 100);\r\n    }\r\n\r\n    private checkCookie() {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        if (!hasCookie(this.cookieName)) {\r\n            setTimeout(() => this.checkCookie(), 100);\r\n            return;\r\n        }\r\n\r\n        var value = readCookie(this.cookieName);\r\n\r\n        var response = createCookieResponseDocument(value);\r\n        this.receivedCallback(response);\r\n    }\r\n\r\n    dispose() {\r\n        this.disposed = true;\r\n\r\n        clearCookie(this.cookieName);\r\n        this.receivedCallback = null;\r\n    }\r\n} ","class FormResponseHandler {\r\n    private receivedCallback: (response: IResponseDocument) => void;\r\n    private form: Form.IForm;\r\n\r\n    onReceived(option: IOption, form: Form.IForm, receivedCallback: (response: IResponseDocument) => void) {\r\n        this.form = form;\r\n        this.form.onLoaded(() => this.onStateUpdated());\r\n\r\n        this.receivedCallback = receivedCallback;\r\n    }\r\n\r\n    private onStateUpdated() {\r\n        try {\r\n            var documentOfIFrame = this.form.getResponseDocument();\r\n            if (!documentOfIFrame) {\r\n                this.receivedCallback(createErrorResponseDocument('server abort'));\r\n                return;\r\n            }\r\n\r\n            if (!documentOfIFrame.isLoaded()) {\r\n                setTimeout(() => this.onStateUpdated(), 250);\r\n                return;\r\n            }\r\n\r\n            this.receivedCallback(documentOfIFrame);\r\n        } catch (error) {\r\n            this.receivedCallback(createErrorResponseDocument(error));\r\n        }\r\n    }\r\n\r\n    dispose() {\r\n        if (this.form) {\r\n            this.form.dispose();\r\n            this.form = null;\r\n        }\r\n\r\n        this.receivedCallback = null;\r\n    }\r\n}","enum DataType {\r\n    Json,\r\n    Xml,\r\n    Text\r\n}\r\n\r\ninterface IFileData {\r\n    name: string;\r\n    element: HTMLInputElement;\r\n}\r\n\r\ninterface IOption {\r\n    method?: string;\r\n    url?: string;\r\n\r\n    data?: any;\r\n    files?: IFileData[];\r\n    desiredResponseDataType?: DataType;\r\n\r\n    timeoutInSeconds?: number;\r\n}\r\n\r\ninterface IResponseStatus {\r\n    code: number;\r\n    text: string;\r\n    isSuccess: boolean;\r\n}\r\n\r\ninterface IAjaxFileResult {\r\n    error?: any;\r\n    data?: any;\r\n    status?: IResponseStatus;\r\n}\r\n\r\ninterface IAjaxFileResultCallback {\r\n    (result: IAjaxFileResult);\r\n}\r\n\r\ninterface IAjaxFilePromise {\r\n    then(success: IAjaxFileResultCallback, error?: IAjaxFileResultCallback): IAjaxFilePromise;\r\n    done(success: IAjaxFileResultCallback): IAjaxFilePromise;\r\n    fail(error: IAjaxFileResultCallback): IAjaxFilePromise;\r\n    always(error: IAjaxFileResultCallback): IAjaxFilePromise;\r\n\r\n    abord();\r\n}\r\n\r\ninterface IReponseHandler {\r\n    onReceived(option: IOption, form: Form.IForm, receivedCallback: (response: IResponseDocument) => void): void;\r\n\r\n    dispose(): void;\r\n}","var defaultOption: IOption = {\r\n    data: {},\r\n    files: [],\r\n    desiredResponseDataType: DataType.Json,\r\n    method: 'POST',\r\n    timeoutInSeconds: 60\r\n};\r\n\r\nvar mergeWithDefaultOption = (option: IOption): IOption => {\r\n    option = $.extend(true, {}, defaultOption, option);\r\n\r\n    if (!option.url) {\r\n        option.url = getCurrentUrlWithoutHash();\r\n    }\r\n\r\n    return option;\r\n};","class ReponseHandlerDispatcher {\r\n    private handlers: IReponseHandler[];\r\n\r\n    constructor(id: string) {\r\n        var cookieHandler: IReponseHandler = new CookieReponseHandler(id);\r\n        this.handlers = [\r\n            new TimeoutResponseHandler(),\r\n            new FormResponseHandler(),\r\n            cookieHandler\r\n        ];\r\n    }\r\n\r\n    onReceived(option: IOption, form: Form.IForm, receivedCallback: (response: IResponseDocument) => void) {\r\n        this.handlers.forEach((handler) => {\r\n            handler.onReceived(option, form, receivedCallback);\r\n        });\r\n    }\r\n\r\n    dispose() {\r\n        this.handlers.forEach((handler) => {\r\n            handler.dispose();\r\n        });\r\n    }\r\n} ","var generateRequestId = (): string => 'ajaxFile' + (new Date().getTime());\r\n\r\nclass Request {\r\n    private option: IOption;\r\n    private form: Form.IForm;\r\n    private isCompleted: boolean;\r\n    private responseHandler: IReponseHandler;\r\n    private id: string;\r\n\r\n    private successCallback : IAjaxFileResultCallback;\r\n    private errorCallback: IAjaxFileResultCallback;\r\n\r\n    constructor(option: IOption) {\r\n        this.option = option;\r\n        this.id = generateRequestId();\r\n        this.responseHandler = new ReponseHandlerDispatcher(this.id);\r\n    }\r\n\r\n    initialize() {\r\n        this.form = Form.createForm(this.option, this.id);\r\n    }\r\n\r\n    submit(): IAjaxFilePromise {\r\n        var promise = new AjaxFilePromise(() => this.abord(), (successCallback, errorCallback) => {\r\n            this.successCallback = successCallback;\r\n            this.errorCallback = errorCallback;\r\n        });\r\n\r\n        setTimeout(() => this.send(), 10);\r\n\r\n        return promise.always(() => this.dispose());\r\n    }\r\n\r\n    private send() {\r\n        if (this.isCompleted) {\r\n            return;\r\n        }\r\n\r\n        this.responseHandler.onReceived(this.option, this.form, (response) => this.onResponseReceived(response));\r\n\r\n        try {\r\n            this.form.submit();\r\n        } catch (err) {\r\n            this.onError('error', err);\r\n        }\r\n    }\r\n\r\n    private onResponseReceived(response: IResponseDocument) {\r\n        if (this.isCompleted) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            var result = response.read(this.option.desiredResponseDataType);\r\n\r\n            if (result.status.isSuccess) {\r\n                this.successCallback(result);\r\n            } else {\r\n                this.errorCallback(result);\r\n            }\r\n        } catch (error) {\r\n            this.onError('error', error);\r\n        }\r\n\r\n        this.isCompleted = true;\r\n    }\r\n\r\n    abord(reason?: string) {\r\n        this.onError(reason || 'cancelled');\r\n    }\r\n\r\n    private onError(error: any, status?: IResponseStatus, data?: any) {\r\n        if (this.isCompleted) {\r\n            return;\r\n        }\r\n        this.isCompleted = true;\r\n\r\n        this.form.abord();\r\n\r\n        this.errorCallback({ status: status, data: data, error: error });\r\n    }\r\n\r\n    dispose() {\r\n        this.isCompleted = true;\r\n\r\n        if (this.form) {\r\n            this.form.dispose();\r\n            this.form = null;\r\n        }\r\n\r\n        if (this.responseHandler) {\r\n            this.responseHandler.dispose();\r\n            this.responseHandler = null;\r\n        }\r\n    }\r\n}","interface IResponseDocument {\r\n    read(desiredDataType: DataType) : IAjaxFileResult;\r\n}\r\n\r\nvar createErrorResponseDocument = (error: string): IResponseDocument => {\r\n    return {\r\n        read: (): IAjaxFileResult => {\r\n            throw error;\r\n        }\r\n    };\r\n};\r\n\r\nvar createCookieResponseDocument = (value: string): IResponseDocument => {\r\n    return {\r\n        read(desiredDataType: DataType) {\r\n            var data = parse(value, desiredDataType);\r\n\r\n            return { status: extractStatus(), data: data };\r\n        }\r\n    };\r\n};\r\n\r\nclass FormResponseDocument {\r\n    private document: any;\r\n    private origineUrl: string;\r\n\r\n    constructor(document: Document, origineUrl: string) {\r\n        this.document = document;\r\n        this.origineUrl = origineUrl;\r\n    }\r\n\r\n    isLoaded(): boolean {\r\n        if (!this.hrefHasChanged()) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isXml()) {\r\n            return true;\r\n        }\r\n\r\n        return this.document.body !== null && !!this.document.body.innerHTML;\r\n    }\r\n\r\n    private hrefHasChanged(): boolean {\r\n        return this.document.location.href != this.origineUrl;\r\n    }\r\n\r\n    private isXml() {\r\n        return this.document.XMLDocument || $.isXMLDoc(this.document);\r\n    }\r\n\r\n    read(desiredDataType: DataType): IAjaxFileResult {\r\n        var container = this.searchContainer();\r\n\r\n        var status = extractStatus(container);\r\n        var data = parse(container.val(), desiredDataType);\r\n\r\n        return { status: status, data: data };\r\n    }\r\n\r\n    private searchContainer(): JQuery {\r\n        var container = this.document.getElementsByTagName('textarea')[0];\r\n        if (!container) {\r\n            throw 'Cannot find textarea in response';\r\n        }\r\n\r\n        return $(container);\r\n    }\r\n}\r\n\r\nvar extractStatus = (container?: JQuery): IResponseStatus => {\r\n    var status: IResponseStatus = {\r\n        code: 200,\r\n        text: 'OK',\r\n        isSuccess: true,\r\n    };\r\n\r\n    if (container) {\r\n        var code = Number(container.attr('statusCode')) || status.code;\r\n        status.code = code;\r\n        status.text = container.attr('statusText') || status.text;\r\n        status.isSuccess = code >= 200 && code < 300 || code === 304;\r\n    };\r\n\r\n    return status;\r\n};\r\n\r\nvar parse = (value: string, desiredDataType: DataType) => {\r\n    if (!value) {\r\n        return null;\r\n    }\r\n\r\n    if (desiredDataType == DataType.Text) {\r\n        return value;\r\n    }\r\n\r\n    if (desiredDataType == DataType.Json) {\r\n        return $.parseJSON(value);\r\n    }\r\n\r\n    if (desiredDataType == DataType.Xml) {\r\n        var xml = $.parseXML(value);\r\n        if (xml.documentElement.nodeName === 'parsererror') {\r\n            throw 'parsererror';\r\n        }\r\n\r\n        return xml;\r\n    }\r\n\r\n    throw 'Invalid datatype : ' + desiredDataType;\r\n};","class TimeoutResponseHandler {\r\n    private timeoutHandle: number;\r\n\r\n    onReceived(option: IOption, form: Form.IForm, receivedCallback: (response: IResponseDocument) => void) {\r\n        this.dispose();\r\n\r\n        if (option.timeoutInSeconds) {\r\n            var timeoutInMilliseconds = option.timeoutInSeconds * 1000;\r\n            this.timeoutHandle = setTimeout(() => {\r\n                receivedCallback(createErrorResponseDocument('Timeout'));\r\n            }, timeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    dispose() {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n            this.timeoutHandle = null;\r\n        }\r\n    }\r\n}","var map = <TOutput, TInput>(data: TInput[], callback: (value: TInput) => TOutput): TOutput[]=> {\r\n    if (typeof callback != \"function\") {\r\n        throw new TypeError();\r\n    }\r\n\r\n    var arrayLength = data.length;\r\n    var result = new Array(arrayLength);\r\n    for (var i = 0; i < arrayLength; i++) {\r\n        if (i in data) {\r\n            result[i] = callback.call(undefined, data[i]);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nif (!Array.prototype.forEach) {\r\n    Array.prototype.forEach = function (fn, scope) {\r\n        for (var i = 0, len = this.length; i < len; ++i) {\r\n            fn.call(scope, this[i], i, this);\r\n        }\r\n    }\r\n}","/// <reference path=\"utils.ts\" />\r\nvar getCurrentUrlWithoutHash = (): string => {\r\n    var currentUrl = window.location.href;\r\n    return (currentUrl.match(/^([^#]+)/) || [])[1];\r\n};\r\n\r\nvar currentPageIsHttpsMode = (): boolean => urlIsHttpsMode(window.location.href);\r\n\r\nvar urlIsHttpsMode = (url: string): boolean => /^https/i.test(url || '');\r\n\r\nmodule JsonToPostDataConverter {\r\n    export interface IData {\r\n        name: string;\r\n        value: string;\r\n    }\r\n\r\n    var pushParameters = (results: IData[], data: any, prefix?: string) => {\r\n        if (!data) {\r\n            return;\r\n        }\r\n\r\n        for (var propertyName in data) {\r\n            var value = data[propertyName];\r\n            if(!value) continue;\r\n\r\n            pushParameterOfProperty(results, propertyName, data[propertyName], prefix);\r\n        }\r\n    };\r\n\r\n    var pushParameterOfProperty = (results: IData[], propertyName: string, value: any, prefix?: string) => {\r\n        var parameterName = prefix ? prefix + '[' + propertyName + ']' : propertyName;\r\n\r\n        var type = Object.prototype.toString.call(value);\r\n\r\n        if (type === '[object Array]') {\r\n            value.forEach((item, index) => {\r\n                pushParameters(results, item, parameterName + '[' + index + ']');\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (type == '[object Object]') {\r\n            pushParameters(results, value, parameterName);\r\n            return;\r\n        }\r\n\r\n        results.push({ name: parameterName, value: value + '' });\r\n    };\r\n\r\n    export var convert = (data: any): IData[]=> {\r\n        var result = [];\r\n\r\n        pushParameters(result, data);\r\n\r\n        return result;\r\n    };\r\n}\r\n","module AjaxFileJQuery {\r\n    var convertAjaxFilePromiseToDeferred = (promise: IAjaxFilePromise, queryOption: IJqueryOption, option: IOption): JQueryDeferred<any> => {\r\n        var deferred = $.Deferred();\r\n\r\n        var eventTrigger = JQueryEventTrigger;\r\n\r\n        eventTrigger.send(option, generateJqueryXHR(null, queryOption, option, promise));\r\n\r\n        promise.then((result: IAjaxFileResult) => {\r\n            var xhr = generateJqueryXHR(result, queryOption, option, promise);\r\n            deferred.resolve(result.data, result.status && result.status.text, xhr);\r\n            eventTrigger.success(option, xhr);\r\n        }).fail((result: IAjaxFileResult) => {\r\n            var xhr = generateJqueryXHR(result, queryOption, option, promise);\r\n            deferred.reject(xhr, result.status && result.status.text, result.error);\r\n            eventTrigger.error(option, xhr, result.error);\r\n        });\r\n\r\n        if (queryOption.error) {\r\n            deferred.fail(queryOption.error);\r\n        }\r\n\r\n        if (queryOption.success) {\r\n            deferred.done(queryOption.success);\r\n        }\r\n\r\n        if (queryOption.complete) {\r\n            deferred.always(queryOption.complete);\r\n        }\r\n\r\n        return deferred;\r\n    };\r\n\r\n    var generateOption = (jqueryOption: IJqueryOption): IOption => {\r\n        var option = convertJqueryOptionToOption(jqueryOption);\r\n        var defaultSettings = convertJqueryOptionToOption($.ajaxSettings);\r\n        return $.extend(true, {}, defaultSettings, defaultOption, option);\r\n    };\r\n\r\n    $.fn.ajaxWithFile = (jqueryOption: IJqueryOption): JQueryDeferred<any> => {\r\n        var option = generateOption(jqueryOption);\r\n\r\n        var result = AjaxFile.send(option);\r\n\r\n        return convertAjaxFilePromiseToDeferred(result, jqueryOption, option);\r\n    }\r\n}","module JQueryEventTrigger {\r\n    declare var $: any;\r\n\r\n    export var send = (option: IJqueryOption, xmlHttpRequest: IJQueryXHR) => {\r\n        if ($.active++ === 0) {\r\n            sendGlobalEvent(option, 'ajaxStart');\r\n        }\r\n\r\n        sendGlobalEvent(option, 'ajaxSend', [xmlHttpRequest, option]);\r\n    };\r\n\r\n    export var error = (option: IJqueryOption, xmlHttpRequest: IJQueryXHR, errorThrown?: string) => {\r\n        sendGlobalEvent(option, 'ajaxError', [xmlHttpRequest, option, errorThrown]);\r\n        completed(option, xmlHttpRequest);\r\n    };\r\n\r\n    export var success = (option: IJqueryOption, xmlHttpRequest: IJQueryXHR) => {\r\n        sendGlobalEvent(option, 'ajaxSuccess', [xmlHttpRequest, option]);\r\n        completed(option, xmlHttpRequest);\r\n    };\r\n\r\n    var completed = (option: IJqueryOption, xmlHttpRequest: IJQueryXHR) => {\r\n        sendGlobalEvent(option, 'ajaxComplete', [xmlHttpRequest, option]);\r\n\r\n        if (!--$.active) {\r\n            sendGlobalEvent(option, 'ajaxStop');\r\n        }\r\n    };\r\n\r\n    var sendGlobalEvent = (option: IJqueryOption, eventName: string, parameters?: any) => {\r\n        if (!option.global) {\r\n            return;\r\n        }\r\n\r\n        $.event.trigger(eventName, parameters);\r\n    };\r\n};","var convertToDataType = (dataType: string) => {\r\n    dataType = dataType && dataType.toLowerCase();\r\n    if (dataType == 'xml') {\r\n        return DataType.Xml;\r\n    } else if (dataType == 'text') {\r\n        return DataType.Text;\r\n    }\r\n\r\n    return DataType.Json;\r\n};\r\n\r\nvar convertJqueryOptionToOption = (jqueryOption: IJqueryOption): IOption => {\r\n    return {\r\n        method: jqueryOption.type,\r\n        url: jqueryOption.url,\r\n\r\n        data: jqueryOption.data,\r\n        files: jqueryOption.files,\r\n        desiredResponseDataType: convertToDataType(jqueryOption.dataType),\r\n\r\n        timeoutInSeconds: (jqueryOption.timeout || 0) * 10000,\r\n    };\r\n};","var generateJqueryXHR = (result: IAjaxFileResult, queryOption: IJqueryOption, option: IOption, promise: IAjaxFilePromise): IJQueryXHR => {\r\n    result = result || { };\r\n    var status = result.status;\r\n    return {\r\n        readyState: 0,\r\n        status: (status && status.code) || 0,\r\n        statusText: (status && status.text) || 'n/a',\r\n        responseXML: option.desiredResponseDataType == DataType.Xml ? result.data : null,\r\n        responseText: option.desiredResponseDataType == DataType.Text ? result.data : null,\r\n\r\n        abort: () => { promise.abord(); },\r\n\r\n        setRequestHeader: () => { throw 'not supported'; },\r\n        getAllResponseHeaders: (): string => { return ''; },\r\n        getResponseHeader: header => header.toLowerCase() == 'content-type' ? queryOption.dataType : undefined,\r\n    };\r\n}; "],"sourceRoot":"/source/"}